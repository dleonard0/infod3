.\" -mdoc
.Dd Feb 18, 2018
.Os Linux
.Dt LIBINFO 3
.Sh NAME
.Nm libinfo.a
.Nd library routines for key-value-notify service
.Sh SYNOPSIS
.In libinfo.h
.Ss SIMPLE STRING VALUE API
.Ft int
.Fn info_writes "const char *key" "const char *strval"
.Ft "char *"
.Fn info_reads "const char *key" "char *buf" "unsigned int bufsz"
.Ft int
.Fn info_delete "const char *key"
.Ft int
.Fn info_exists "const char *key"
.Ss BINARY VALUE API
.Ft int
.Fn info_write "const char *key" "const char *val" "unsigned int valsz"
.Ft int
.Fn info_read "const char *key" "char *buf" "unsigned int bufsz"
.Ss MULTIPLE VALUE API
.Bd -literal
struct info_bind {
    const char *key;        /* NULL means sentinel entry */
    char *value;            /* NULL means delete */
    unsigned int valuesz;
}
.Ed
.Ft int
.Fn info_writev "const struct info_bind *binds"
.Ft int
.Fn info_readv "struct info_bind *binds" "char *buf" "unsigned int bufsz"
.Ss TRANSACTION API
.Ft int
.Fn info_tx_begin
.Ft int
.Fn info_tx_write "const char *key" "const char *value" "unsigned int valuesz"
.Ft int
.Fn info_tx_read "const char *key"
.Ft int
.Fn info_tx_delete "const char *key"
.Ft int
.Fn info_tx_sub "const char *pattern"
.Ft int
.Fn info_tx_unsub "const char *pattern"
.Ft int
.Fo info_tx_commit
.Fa "int (*cb)(const char *key" "const char *value" "unsigned int valuesz)"
.Fc
.Ss WAITING FOR NOTIFICATIONS
.Ft int
.Fo info_loop
.Fa "int (*cb)(const char *key" "const char *value" "unsigned int valuesz)"
.Fc
.Ss IN-CALLBACK FUNCTIONS
.Ft int
.Fn info_cb_read "const char *key"
.Ft int
.Fn info_cb_sub "const char *pattern"
.Ft int
.Fn info_cb_unsub "const char *pattern"
.Ft void
.Fn info_cb_close
.Ss MISCELLANEOUS
.Ft "const char *"
.Fn info_get_last_error
.Ft int
.Fn info_open "const char *server"
.Vt extern unsigned int info_retries;
.Ft int
.Fn info_close
.Ft int
.Fn info_fileno
.Sh DESCRIPTION
.Ss INTRODUCTION
.Nm libinfo
provides a C client API for accessing the
.Xr infod 8
a key-value storage service.
.Pp
.Em Keys
are NUL-terminated UTF-8 strings,
while
.Em values
are arbitrary binary data.
Values may be updated or deleted in any order,
while key names remain fixed once created.
The combined size of any key with its value is
limited to 65535 bytes including the key's
trailing NUL.
.Pp
Besides storing and retreiving values, this
library permits asynchronous notification for
when a value is changed by another client.
.Ss ERROR HANDLING
Errors are signaled by a function returning \-1 or NULL.
.Va errno
is always set to an error code that indicates the cause.
.Pp
The error code
.Va EPIPE
is reserved to indicate that a server message
is available from
.Fn info_get_last_error .
.Ss INITIALISATION
.Nm libinfo
needs no initialisation.
The library will automatically connect on demand.
See
.Fn info_open .
.\" located either by the environment variable
.\" .Ev INFO_SOCKET
.\" using or the abstract
.\" .Xr unix 7
.\" address
.\" .Pa \e0INFOD .
.Ss SIMPLE USE
.Fn info_writes
updates the value of
.Fa key
with the string
.Fa strval .
The trailing NUL is not stored.
If
.Fa strval
is NULL, the key is deleted.
.Pp
.Fn info_reads
reads the last value written to
.Fa key
and stores it, NUL-terminated, into buffer
.Fa buf .
If the key does not exist or has been deleted,
.Fn info_reads
returns NULL and
sets
.Va errno
to
.Er ENOENT.
.Pp
.Fn info_delete
deletes the
.Fa key
from the server.
.Pp
.Fn info_exists
tests if the key has a value stored in it.
It returns 0 or 1, or \-1 on error.
.Ss BINARY VALUES
.Fn info_read
and
.Fn info_write
read and write binary values to keys.
.Pp
Because the server and all clients are local,
host-endian layout of values can be used.
.Ss BULK USE
.Fn info_readv
and
.Fn info_writev
are used to access and update values coherently,
which is to say all-at-once.
The reads (or writes) are grouped into a transaction
so that other clients either see the entire update or
none of the update.
.Pp
These functions guarantee that a collection of keys
are read or written together on the server with no intervening
operations.
.Pp
In the
info_bind
structure, a NULL in the
.Va value
field indicates the key does not exists, or should be deleted.
.Ss TRANSACTIONS
.Fn info_tx_begin
tells the server to begin recording commands:
.Fn info_tx_read ,
.Fn info_tx_write ,
.Fn info_tx_delete ,
.Fn info_tx_sub
and
.Fn info_tx_unsub .
Execute the recorded commands all together with
.Fn info_tx_commit .
.Ss NOTIFICATIONS
.Fn info_loop
waits for a message from the server, and invokes
the callback function.
The loop only terminates if the callback function
returns 0 or a negative integer, and this
is passed through as the return value of
.Fn info_loop .
.Ss CALLBACK-SAFE
Some functions are
.Em not
safe to call from within a callback
function:
.Fn info_read ,
.Fn info_reads ,
.Fn info_readv ,
.Fn info_exists ,
.Fn info_close
and any of the transaction functions.
These functions will all return an EBUSY error
when called from a callback.
.Pp
Instead, use
.Fn info_cb_read ,
.Fn info_cb_sub ,
.Fn info_cb_unsub
and
.Fn info_cb_close .
.Ss LOW LEVEL
.Fn info_get_last_error
returns the last error message received by the server.
.Pp
.Fn info_open
is automatically called by all other functions to open
the socket to the server.
It will always attempt to contact the server
.Va info_retries
times before deciding to fail.
.Pp
.Fn info_close
forces the socket to be closed.
The socket may yet be opened again by
.Fn info_open
or any other call.
.Pp
.Fn info_fileno
returns the file descriptor associated with the
server.
